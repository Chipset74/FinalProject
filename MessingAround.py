testarray = ["test", "test2", "test3", "test4"]
y = [x for x in range(0,10)]
one,two,three,four,five,six,seven,eight,nine = y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9] #more spoofing
print(testarray[one])
if(0.1+0.2 == 0.30000000000000004): # floating point number
    print('passed') #passes
print(0.6+1.1) # more floating point
import string
import hashlib

a,xx = list(),[]
[xx.append(x) for x in string.printable]
[a.append(string.printable) for xy in xx] #append all characters for every item in list
print(a[nine*nine][54]+a[54][29]+a[92][27]+a[44][18]+a[73][23]+a[50][16]+a[38][77]+a[47][94]+a[22][17]+a[23][14]+a[32][21]+a[62][21]+a[65][24]+a[49][94]+a[64][32]+a[47][24]+a[8][27]+a[31][21]+a[2][13])

testingdict = {
    0+1+2-2: 't',
    5+5-5*2/2: 'e',
    6-6+6: 't',
    2*2*2/2/2: 's'
} #can run math in a dict
print(testingdict)
print(testingdict[5-4] + testingdict[10-5] + testingdict[5+1-4] + testingdict[2+4]) # prints 'test'

print(bool([])) # = false bool[1] = true
if(len('\\a\h\\t\\\m\\\\\\') == 12): # valid
    print('yes')
print(len('\/'))
a = '\\ \ \\ \ \\'
for x in a.split(' '):
    print(len(x)) # might use this for final packing, put in base64 then inverse then binary then this
def test():
    print('working :)')

_print = print # found https://stackoverflow.com/questions/49271750/is-it-possible-to-hack-pythons-print-function
def print(a):
    _print(a)
print('a')
test = 'test'
print(hashlib.md5(str.encode(test)).hexdigest()) #https://docs.python.org/3/library/hashlib.html

#########################################
"""
_______ = [x for x in range(0,10)]
____,_____,______ = _______[1],_______[2],_______[3]
___________________,____________________________ = list(),[]
[____________________________.append(x) for x in eval('elbatnirp.gnirts'[::-1])]
[___________________.append(eval('elbatnirp.gnirts'[::-1])) for ______________ in ____________________________]
__=print
exec('def print(_):\n\tif(0.1+0.2 == 0.30000000000000004):\n\t\treturn(_)')
___ = [___________________[46][43],___________________[54][14], ___________________[29][34]]
_={
194*0+5-4:___[0],
5-______+_____-2:___[____],
______-4+4*2/_____:___[2]
}
def ________():
    return _[____]+_[_____]+_[______+____-____]
__(________()) 
"""
#TODO
# - Start Main Project Files
# - 

a,xx = list(),[]
[xx.append(x) for x in string.printable]
[a.append(string.printable) for xy in xx] 
dc={12-8%2-12-16*3*8%10%6%17+4: a[10+7-3*5%13%4+18%2%12*16+5][15+20+13%3-14*2*2%8%9%12+7], 16*7%8+8*6%8*12%5%4*11+1: a[19+17*1%15%13%7%10-17+13*6+5][5%17-18-19%6+6%9%16*1+18+4], 10*3%3%11+19*8%17%3-19+17+3: a[4%8%6-6-12-5+13+20+20%11+9][12-17%20*2-7+18*3+17%5%4+7], 19+4%4+12-14-5%12%4%7-16+3: a[13+15-4*15+11*12%17+11-2+15+9][7+5-5%1*8%9+15+4*10+2+4], 1*1%2-3*13%17+7*15%14*1+1: a[10%7*19-1*8+2*17*2%9*8+3][17+4*13%16+18-19+13%8*1*13+9], 4+14-9-19%17*7+9+6%6*2+1: a[1+20+16+9-16+13+1*10+20+13+4][19+6-17%18+5%16+18+11%19%12+6], 15+7-9%16+11-18-7+14-15+4+4: a[2*15+20-19%4%19*20*9%6*20+3][18-16+6+19%17%12%12+10%11+9+5], 9-1%7-6%3%13*15*14-19%5+3: a[5+8-18%6+5%11%16*2%9-10+5][7%14-15-14-2+17+18*5-6+13+4], 12-2*12+16+5%20*15*10%3%7+4: a[4-15*5-5*4*19+13*7*6-13+9][17%12+9%18+5%14%11%9+15-14+3], 7%15%10%14-1%9+17%14*13%2+2: a[19%7%9*15+13%1-6*9%14+10+4][6%3-12*20%5+16%3*20-12-1+3], 2*11-19+18%4%5+10%15%13-10+5: a[19-8%18%16*14%6-6-20+7*5+8][10+14*2*8%18+3%18%11%15%1+4], 15-8*3%13%6*12%11-1*18%8+3: a[8+20+14%5%20%7-8-11%20+19+9][16-14-3*6*10*3%4+16%11%14+7], 9*9*1-1-2*18-10+7-16-14+1: a[20+8+3-2+13+11%12-4+6+11+3][14+20+2*18-2+15+17%12%9%7+6], 11*16%13-12%1*2%11*4%5*4+6: a[13%16*5-5+7%18-2*6+7*5+5][10%3%2-1*2*12*6%10%18+18+3], 8%11-3-18-6*6*17%9+10+11+6: a[6-5%17-1+14%20%3*4*10%19+6][4+12-18*2%12%4%13*7%17+10+2], 9%2+2+8-11+16%19+6-5-6+4: a[3*6%14*20+18-15*7+11-3*1+5][6*13+15+18+7-18-17+11-20%15+5], 10%15%12*17%13*5-6%5+20%12+4: a[1*7%17%13+13+13+6%11*2+18+2][14+19*1-18%11-3+12%18%1-17+5], 7+11*15*8%6+12%8%17%6-3+9: a[2*5*2-3*6+19-12%4+10+5+4][7%20%4+13-16-8-17%1+12*2+2], 1+19-3*4+2%3+10-13-8+14+5: a[11*9%7+9*7-4+8%3%4*11+5][6*7%5-9+2%17*10+6*10%18+2], 17-18-10*6*18%13%8+18%8+18+1: a[1%5*3+19+8-10-1*12*14%6+4][19%18-8-20+2*9+3*14-15-5+8], 19%4*4+5*11*19%1-3%10+10+1: a[3*18+20*3%8-6+20-2%7-8+2][6%14+12-20%10*16*17*10%8+14+2], 18+13-3+16-3-11%18-8%6*5+1: a[15-10+14*4+10%10%15%19+4+19+8][14+7*7+6+14-10%20+14+12-10+5], 7*2+5-2-1*16%4-20*16%20+5: a[20%2+13%13%5+18+10+5*4+16+1][3%5+1*4+4+1-5*20%17+11+3], 17%14-9+16-8+14%12%17%2+16+5: a[9*1+3*15-7-8-1-7+11+17+2][16*11*3%19%7+14%18+4*3-12+9], 13-1+7%19-11*16%5*3-9%9+8: a[19%14-13%11+12*16*16%14%10+4+3][20-14-1*7-1+3*9*15*17%7+9], 17%16+16*19%1*12+12+20%15+4+3: a[13+15%19%20+16*3%7-8+7+2+4][12%2%17*4%6-5*2%20+12*8+8], 18-1+18%14+2-18%13+6%19-6+8: a[12+5+1%5*10+13*6-19+9-8+8][7+13-16%7-9+10-11%4%20-1+4], 16-17*15*1*4%7+4+18-13+3+4: a[18%3-9+6%20+4-11+16+8*9+5][15+6-6%4*11+11-15%20%3+11+3], 11%12%7*6+1-9*7%5%4%9+6: a[12*6-12-15+2*14*10%19%6+20+6][12-20-7%3+4-19%12%3+18-2+4]}
print(dc[2+7*11*15%19%6-11*18*17%14+1]+dc[18*19*14*8*15*19%18-5+19%7+1]+dc[19-15%18+19%9-2-12-13-4+19+9]+dc[13+16%10-3-4%12-10-9*2%3+1]+dc[17-13+20*4%10+3*6%1+15-17+2]+dc[7+7-8-10+8*9%12+8-3%6+4]+dc[9+18%12+1-17-7%3%17*3+4+6]+dc[15%8%11%1+16-15%17+4%15%5+2]+dc[3-6*2*4+4-6+18+3*14-14+9]+dc[6*15%10%9*6-17*4%17-12+13+8]+dc[14*13%13*19+10+17%4%6-9%5+3]+dc[6*10%7+3+18%9+18%17-3%17+6]+dc[9-19-1+20-8%2*1-2%14%9+5]+dc[9%3%17-6%9-2+15+5-9%5+5]+dc[17%6*5-7-11-2*14*3%14*19+7]+dc[13%8*17%1+12*1%16-15%12+2+4]+dc[10-15+17%3%6*17%19+20%18%12+4]+dc[18%12-3%15%9-5%14%19+14-2+7]+dc[15-15%2%10%1-1%16*4%15%10+7]+dc[3%19-5%11+15+4*12%4%11%4+6]+dc[15%10-1*5-2*13+13+12+16*1+5]+dc[11%7%5%5+7+19*1-4%4-16+7]+dc[20+18*14%14%16*20-2-7%8+2+9]+dc[4+6+10-3-5+6*3-11+2%10+2]+dc[15+17+5%6-10*9%9%18%4-16+3]+dc[18+5%6%2*7%4*4-18-3+15+1]+dc[1*8%15%1-11-1+4+8%10+20+6]+dc[7%10+9+16-4-12%10-15%2%1+1]+dc[3-12*18%4-1*1%1%6+19+4+2])
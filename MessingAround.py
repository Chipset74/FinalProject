testarray = ["test", "test2", "test3", "test4"]
y = [x for x in range(0,10)]
one,two,three,four,five,six,seven,eight,nine = y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9] #more spoofing
print(testarray[one])
if(0.1+0.2 == 0.30000000000000004): # floating point number
    print('passed') #passes
print(0.6+1.1) # more floating point
import string
import hashlib

a,xx = list(),[]
[xx.append(x) for x in string.printable]
[a.append(string.printable) for xy in xx] #append all characters for every item in list
print(a[nine*nine][54]+a[54][29]+a[92][27]+a[44][18]+a[73][23]+a[50][16]+a[38][77]+a[47][94]+a[22][17]+a[23][14]+a[32][21]+a[62][21]+a[65][24]+a[49][94]+a[64][32]+a[47][24]+a[8][27]+a[31][21]+a[2][13])

testingdict = {
    0+1+2-2: 't',
    5+5-5*2/2: 'e',
    6-6+6: 't',
    2*2*2/2/2: 's'
} #can run math in a dict
print(testingdict)
print(testingdict[5-4] + testingdict[10-5] + testingdict[5+1-4] + testingdict[2+4]) # prints 'test'

print(bool([])) # = false bool[1] = true
if(len('\\a\h\\t\\\m\\\\\\') == 12): # valid
    print('yes')
print(len('\/'))
a = '\\ \ \\ \ \\'
for x in a.split(' '):
    print(len(x)) # might use this for final packing, put in base64 then inverse then binary then this
def test():
    print('working :)')

_print = print # found https://stackoverflow.com/questions/49271750/is-it-possible-to-hack-pythons-print-function
def print(a):
    _print(a)
print('a')
test = 'test'
print(hashlib.md5(str.encode(test)).hexdigest()) #https://docs.python.org/3/library/hashlib.html

#########################################
"""
_______ = [x for x in range(0,10)]
____,_____,______ = _______[1],_______[2],_______[3]
___________________,____________________________ = list(),[]
[____________________________.append(x) for x in eval('elbatnirp.gnirts'[::-1])]
[___________________.append(eval('elbatnirp.gnirts'[::-1])) for ______________ in ____________________________]
__=print
exec('def print(_):\n\tif(0.1+0.2 == 0.30000000000000004):\n\t\treturn(_)')
___ = [___________________[46][43],___________________[54][14], ___________________[29][34]]
_={
194*0+5-4:___[0],
5-______+_____-2:___[____],
______-4+4*2/_____:___[2]
}
def ________():
    return _[____]+_[_____]+_[______+____-____]
__(________()) 
"""
#TODO
# - Start Main Project Files
# - 

a,xx = list(),[]
[xx.append(x) for x in string.printable]
[a.append(string.printable) for xy in xx] 
dc={8-14+4+10+16*20+5-2*17*10+7: a[19*10-8+19-9*16+1+10+9-11+9][14*3*2-3+8+13-6*12-10+16+7], 13+12-1-4*7-2+18-2*8+2+3: a[13-5-11-16-12-9+4*18+14-18+9][9*4+3+7+17-18-5*4-6-13+8], 4-10+4-11+2*18-6-4-8-9+6: a[12*19-1*14-5*13+14-11*8-17+2][17+5*1+1+6+1*4+1-14-4+5], 11+13-20-1*11+1*20-1*9-4+3: a[4-2+11-4+18+18-18+10*8-11+2][18-20*8+7*19+20-6-10+12*2+2], 2*4-16-8*15+5-12+7*17+11+9: a[7+12-1+6+14+7-17-17-1+11+1][4+6+15-10+2-7+13+9-9-4+5], 17-1-5-16*2+11-16+20+19-13+5: a[4+7+1-17-12+5*5+11-6-16+6][9+16*4-20+4+13-17+1+17+15+8], 19-1-9-18+15-18-3+12-10+15+4: a[10-2*2+11+10+15+20-8+10-13+6][16+15+18+1-10+19-2-7+11-12+9], 14-7-8+17-13+4*9-3-17-17+5: a[4+5+7-20+13*4-2*7+3-14+7][12-11+18-20+3*10+18-7-1*19+3], 4*9-19+5-3*1*17+20*1+12+5: a[13+16+11+9-17+10-15+11-5*6+3][19-15+14+13-6-18+18-18+17-2+5], 3-14+13-15+3-6+4-10+5+19+7: a[13+4*1-16+16-18+16+11*6-8+6][10-9-17+10*12-17-19-7*9+8+8], 3*3*6-4+7+18-5*9-4-20+4: a[10+5*13+8*8+9+2+16-18*6+9][1-5*1-8-11-12+1+17*3-7+3], 12+8-14-14-8+6+7+14-5+2+3: a[1+10+3*7+13*3+9-16-13+9+5][14+12*3+11*2-9+8-5-9+2+3], 11-14-11-5*3+1+19+10+20-18+9: a[20+5*5+15-11*3-8-19-18+13+5][2+2+2+10*4*10*1+8-19*17+3], 19+9-3*19-9+19*4-15-9-9+8: a[20+3*15-13+4*10*1+4-3*19+8][3+11+4-16+8-1-2+8+20+4+9], 3*1-2-4-15+13+14-16+4+15+2: a[1-13*2+20+3+1-14+6+5*17+7][18+2+2-8-12-18+2*16+7+8+3], 1*11*3+16-9-3-17-2-12+1+8: a[4*13+2+8-14-9-17-1*10-9+9][12*7+17+7+1*2-4+4-12-5+1], 5+10-6+4+11-14+16+7-8-12+3: a[12*1+7+8+13-2-7+4-6-11+5][6*18-4*19-20+2+19-2-6-7+5], 5*5-13-13+8+16+4-18-15+14+9: a[17-12+6+9+16+12*10-6*13+15+1][7*11-15-1+11+10+17-6-6*14+1], 5+3-8+4-18-13*12-8+10*19+6: a[13*20+14-10*15+5-6-12-15-8+9][1-2-12-4+20+4-4+1*1+11+7], 9+1*20*19-12*11+19*6-20*18+8: a[19-13-14-6+20-4+19*4-13+10+6][11+4-9*6+8+14+12+11+5-5+8], 12+6-8-15+7*2-18+7+1+14+7: a[3+2+12*1+13+3-14+11+6+11+1][18+7+13*9+3-17+6-20-7-14+1], 16+1+19-20-2+3+2*5+1-16+9: a[16+5-13+7-20+15-2-12+14*4+7][12+1+12*1+3+19+6-7-20-12+4], 4+17*9-12-8*10-17-17-5-8+4: a[9+4-4*12+6*3+4*20-15-18+7][12-4*6+14+13-6+13-1+7-3+3], 7+12*3+12-3+5+10-17-17-15+5: a[14-12+11+4-1-10-13-6+12*4+7][6+6-6+5+8+10*8+9-7-14+7], 5+3*6*2-5*8-7+13+17-9+9: a[14-20-17+18-5-1*12+9+12+8+2][1+9*4-1-1*11+5+6+14-13+2], 2-15+18-11+18+19-4*7+11+6+5: a[1+3*9*19+9-14*5*7+1+5+2][20-1+5*15-18+8-13-15*4-5+4], 13+12+2*1+10-12+3-12+12-10+8: a[6*5+5*12-6*12-1*15+20+16+1][10+8-13+14+13+14-12-2*3-10+5], 7-11+20+2*8-15-8+8*3-13+7: a[16*5-7*7+12-6*2+11-15-4+3][5+2-7+16-15*2+9-3-2+19+9], 15-13-3-4-6*6-20+20+4*16+5: a[5-16+3+8*13-17+6+7+1-5+7][12*5-2*7*7*1+5*13-12-3+2], 17-1*7-20*10-5+11*20-19+19+4: a[8-5-9+4*18+17+8-9-4-12+1][7*7+20-11+5-18*5+6+20+14+8], 16-1-18-19+7+8-10*10+9*15+2: a[5+16+7*17+4*17-19-11*10+12+3][11-2+16*19+8-8-6*5-15*13+6], 6+18*5+18-19+6-5*15+17-16+4: a[13-14-14+13*7-11+17+15-4*8+8][18*9+2*4-15-7*13-13+4+19+3], 20+2-14*15-19+13*16+7+12+11+1: a[8*10+19+4-2-20*1+1*7-4+2][5-19+17*19*1-13+6+11-19*13+4]}
print(dc[17-9+20-11-7+6+14-5-17-16+8]+dc[6+20-20+1-7*2+15+6-4-13+4]+dc[15+2-17-18*10-20+15*14-3-11+6]+dc[10+16+20*6+15+14-10*11-11*6+4]+dc[16-13+14+1*9*1+6-4*5-17+9]+dc[5-19+3*19-9-10-1*8-4-9+2]+dc[10+17+4+2-1*19-4-15-2+8+5]+dc[12+15-11-1+2+14-9-4*2-12+5]+dc[1+2-11+4*1-16-3+20+5*1+6]+dc[14-12-3+16+3+15-1*17-1*12+5]+dc[8-5*15+19-3*14+14*5+10+11+9]+dc[13+9-12+3+19-8-17-9+9+2+2]+dc[19+7-2+6+18+10-5*11+16-15+8]+dc[12+8+2+1+8-14*4+17+8+4+9]+dc[6-9-15-2+9-5+7+12+3+6+2]+dc[13-3-19+11*15+20-17*5-5*16+4]+dc[14*18+13-14*11-10+11-14*7-2+4]+dc[3+13-13-13+14-13+18-13+16-4+9]+dc[10+2+10-9-12-17*2+2*2*12+3]+dc[9-3+11+13-12+7-2-11-4+4+7]+dc[12*3-19*18-20-8+2+19*19-13+4]+dc[18+12+6-10+4*3+8-6-14*2+9]+dc[15-14+5*1-14+2*17-7+10-8+1]+dc[11*2-10-14-17+5+11+14+9-4+7]+dc[9-11*5+12+3+4*11-1+19-14+7]+dc[10*1*1+15*7-2-1-5*20+5+8]+dc[16+1*13*9+16-2-17*6-19-2+2]+dc[2+18+12-2-6+8-14-19+12+9+7]+dc[11*6+9+10+12-2*16-18-20-7+8]+dc[17-1*16+9+3-10+17-1-11+17+4]+dc[11*2-17+6-10-14+13+4+20+2+4]+dc[11+19-4-5-8+1+17+10+5-19+4]+dc[13-20+12+4+3+14+4-1*13+11+4])